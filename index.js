const TelegramApi = require('node-telegram-bot-api')
require('dotenv').config();
// token apply 
const express = require('express');
const app = express();
const port = process.env.PORT || 3000;
let helloWorld = {
	"hello": 1,
	"world": 0
}
app.get('/', (req, res) => {
	res.send(helloWorld);
});
app.listen(port, () => {
	console.log(`Server is running on port ${port}`);
});
const token = process.env.TELEGRAM_BOT_TOKEN;
const bot = new TelegramApi(token, {
	polling: true
})

bot.setMyCommands([{
		command: '/start',
		description: '–î–ª—è —á–µ–≥–æ –Ω—É–∂–µ–Ω –±–æ—Ç'
	},
	{
		command: '/change',
		description: '–°–±—Ä–æ—Å–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã'
	}
]).catch((err) => {
	console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥:', err);
});

let checkCommands = function (msg, group) {
	let text = msg.text;
	let chatId = msg.chat.id;
	let course = 4 - Number(group[3])
	if (text != null && text != undefined && text != '') {
		if (text[0] == '/') {
			text = text.slice(1)
		}
	}
	if (text === 'start' || text == '/start' || text == '/start@DailyProphetKpfuBot' || text == 'start@DailyProphetKpfuBot') {
		const startMessage = `
<strong>üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —Å—Ç—É–¥–µ–Ω—Ç! üåü</strong>

üìÖ –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã 

üîç –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: 09-101)
		`
		bot.sendMessage(chatId, startMessage, {
			parse_mode: 'HTML'
		})
		return
	}

	if (text === 'change' || text === "/change" || text == '/change@DailyProphetKpfuBot' || text == 'change@DailyProphetKpfuBot') {
		if (group == '') {
			bot.sendMessage(chatId, `‚ùå –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ—Å—Ç–∏ –≥—Ä—É–ø–ø—É! ‚ùå`)
		} else {
			for (let i = 0; i < whoNeedSchedule.length; i++) {
				if (whoNeedSchedule[i].chat_id == chatId) {
					whoNeedSchedule.splice(i, 1)
					break
				}
			}
			group = ''

			const sql1 = "DELETE FROM dailyProphet WHERE chat_id = ?";
			const groupValues1 = [chatId];

			try {
				pool.getConnection(function (err, connection) {
					if (err) {
						console.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è SQL(–¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏): " + err.message);
						return;
					} else {
						connection.execute(sql1, groupValues1, (err, res) => {
							connection.release()
							if (err) {
								console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–æ—á–∫–∏ SQL: " + err.message);
								bot.sendMessage(chatId, `‚õî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑`)
								return;
							}
						});
						bot.sendMessage(chatId, `‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Å–±—Ä–æ—à–µ–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã`, {
							reply_markup: {
								remove_keyboard: true
							}
						});
					}
				})

				//–£–¥–∞–ª–∏—Ç—å –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–æ–∫
				//
				// pool.getConnection(function (err, connection) {
				// 	if (err) {
				// 		console.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è SQL(–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤): " + err.message);
				// 		return;
				// 	} else {
				// 		connection.execute('SHOW STATUS WHERE variable_name = Threads_connected', (err, res) => {
				// 			connection.release()
				// 			if (err) {
				// 				console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–æ—á–∫–∏ SQL: " + err.message);
				// 				return;
				// 			} else {
				// 				console.log(res)
				// 			}
				// 		});
				// 	}
				// })




			} catch (err) {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã:', err);
			}
			return;
		}
	}
	let linkDestroyer = (lections, googleString, groupIndex) => {
		let platforms = [1, 1, 1, 1, 1, 1, 1]
		lections += `‚è∞ ${googleString[1]}-${googleString[2]}\n\n`
		let strCell = googleString[groupIndex]
		googleString[groupIndex] = googleString[groupIndex].split('\n')
		for (googleCell of googleString[groupIndex]) {
			let link = googleCell
			let textOfLink = ''
			if (googleCell.includes('https://')) {
				if (googleCell.includes('telemost')) {
					textOfLink = `–¢–µ–ª–µ–º–æ—Å—Ç - ${platforms[0]++}`
				} else if (googleCell.includes('mts-link')) {
					textOfLink = `–ú–¢–°-–õ–∏–Ω–∫ - ${platforms[1]++}`
				} else if (googleCell.includes('yandex.ru/chat')) {
					textOfLink = `–Ø–Ω–¥–µ–∫—Å –ß–∞—Ç - ${platforms[2]++}`
				} else if (googleCell.includes('yandex.ru/event')) {
					textOfLink = `–Ø–Ω–¥–µ–∫—Å –ö–∞–ª–µ–Ω–¥–∞—Ä—å - ${platforms[3]++}`
				} else if (googleCell.includes('discord')) {
					textOfLink = `Discord - ${platforms[4]++}`
				} else if (googleCell.includes('zoom')) {
					textOfLink = `Zoom - ${platforms[5]++}`
				} else {
					textOfLink = `–ú–∞—Ç–µ—Ä–∏–∞–ª—ã - ${platforms[6]++}`
				}
				googleCell = `<a href= '${link}' > ${textOfLink} </a>\n`
			}
			if (googleCell == '') {
				lections += '\n\n'
			}

			lections += googleCell
		}

		lections = lections.replace(/–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é:/gi, '')
		lections = lections.replace(/–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é: /gi, '')
		lections = lections.replace(/–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ–≤—Å—Ç—Ä–µ—Å—É –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:/gi, '')
		lections = lections.replace(/–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é –¥–ª—è –∑—Ä–∏—Ç–µ–ª–µ–π:/gi, '')

		googleString[groupIndex] = strCell
		return lections
	}
	//schedule for today
	if ((text == '–ù–∞ —Å–µ–≥–æ–¥–Ω—è' || text == '–ù–∞ –∑–∞–≤—Ç—Ä–∞' || text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è') && group !== '') {
		let groupIndex = listsOfData[course][0].indexOf(group)
		let time1 = new Date()
		let offset1 = time1.getTimezoneOffset() + 180
		let time2 = new Date(new Date() - 0 + offset1 * 60 * 1000 + 1000 * 60 * 10)
		let day = time2.getDay();
		if (text.includes('–∑–∞–≤—Ç—Ä–∞')) {
			day++
		}
		let lectionsForToday = `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: \n\n`
		listsOfData[course].map(googleString => {
			if (day == googleString[0] && googleString[groupIndex] != null && googleString[groupIndex].includes('–û–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä—ã:')) {
				lectionsForToday = linkDestroyer(lectionsForToday, googleString, groupIndex)
			}
		})
		if (lectionsForToday == `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: \n\n`) {
			if (text.includes('–∑–∞–≤—Ç—Ä–∞')) {
				lectionsForToday = 'ü•≥ –ó–∞–≤—Ç—Ä–∞ –ø–∞—Ä –Ω–µ—Ç'
			} else {
				lectionsForToday = 'ü•≥ –°–µ–≥–æ–¥–Ω—è –ø–∞—Ä –Ω–µ—Ç'
			}
		}
		bot.sendMessage(chatId, lectionsForToday, {
			parse_mode: 'HTML',
			disable_web_page_preview: true
		})
	}
	// schedule for week
	let weekDayNames = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
	if (weekDayNames.includes(text)) {
		lectionsFDW = `<b>${text}:</b>\n\n`
		let groupIndex = listsOfData[course][0].indexOf(group)
		let day = weekDayNames.indexOf(text) + 1
		listsOfData[course].map(googleString => {
			if (day == googleString[0] && googleString[groupIndex] != null && googleString[groupIndex].includes('–û–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä—ã:')) {
				lectionsFDW = linkDestroyer(lectionsFDW, googleString, groupIndex)
			}
		})
		if (lectionsFDW == `<b>${text}:</b>\n\n`) {
			lectionsFDW = '–í —ç—Ç–æ—Ç –¥–µ–Ω—å –ø–∞—Ä –Ω–µ—Ç ü•≥'
		}
		bot.sendMessage(chatId, lectionsFDW, {
			parse_mode: 'HTML',
			disable_web_page_preview: true
		})
	}
	if ((text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é' || text == '–ù–∞ –Ω–µ–¥–µ–ª—é') && group !== '') {

		let tempWeekDay = 1
		let groupIndex = listsOfData[course][0].indexOf(group)
		let lectionsForWeek = `
<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:

–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫</b>

`
		listsOfData[course].map(googleString => {
			let nowWeekDay = googleString[0];
			if (googleString[groupIndex] != null && googleString[groupIndex].includes('–û–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä—ã:')) {
				if (nowWeekDay != tempWeekDay) {
					lectionsForWeek += `\n<b>${weekDayNames[nowWeekDay-1]}</b>\n\n`
					tempWeekDay = nowWeekDay
				}
				lectionsForWeek = linkDestroyer(lectionsForWeek, googleString, groupIndex)
			}
		})
		bot.sendMessage(chatId, lectionsForWeek, {
			parse_mode: 'HTML',
			disable_web_page_preview: true
		})
	}
	// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
	let noti = '‚õîÔ∏è'
	let inlineBut = '–í–∫–ª—é—á–∏—Ç—å'
	if (text == '–ò–Ω—Ñ–æ' && group != '') {
		for (let id of whoNeedSchedule) {
			if (id.chat_id == chatId) {
				if (id.notifications) {
					noti = '‚úÖ'
					inlineBut = '–û—Ç–∫–ª—é—á–∏—Ç—å'
				}
			}
		}
		bot.sendMessage(chatId, `
üë• –í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É: ${group}

üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è—Ö: ${noti}

‚úâÔ∏è –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞–º!

üßë‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏: <a href='t.me/chud0kot'>ChudoKOT</a>, <a href='t.me/iWanderling'>–ù–∏–∫–∏—Ç–∞ –°–ª—ã–≤–∫–∞</a>

üí∏ <a href='https://www.tinkoff.ru/rm/akhiyarov.emil1/jomzE2512'>–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –±–æ—Ç–∞</a> 
`, {
			parse_mode: 'HTML',
			disable_web_page_preview: true,
			reply_markup: {
				inline_keyboard: [
					[{
						text: `${inlineBut} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è`,
						callback_data: `1`
					}]
				]
			}
		})
	}
}
/* –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è google sheets */
const {
	google
} = require("googleapis");

function NodeGoogleSheets(keyMass, fun) {
	const auth = new google.auth.GoogleAuth({
		//keyFile: "./google_file.json",
		credentials: {
			type: "service_account",
			project_id: process.env.GOOGLE_PROJECT_ID,
			private_key_id: process.env.GOOGLE_PRIVATE_KEY_ID, //private_key_id: process.env.GOOGLE_PRIVATE_KEY_ID
			private_key: process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/g, '\n'),
			client_email: process.env.GOOGLE_CLIENT_EMAIL,
			client_id: process.env.GOOGLE_CLIENT_ID,
			auth_uri: "https://accounts.google.com/o/oauth2/auth",
			token_uri: "https://oauth2.googleapis.com/token",
			auth_provider_x509_cert_url: "https://www.googleapis.com/oauth2/v1/certs",
			client_x509_cert_url: "https://www.googleapis.com/robot/v1/metadata/x509/" + process.env.GOOGLE_CLIENT_EMAIL,
		},

		scopes: "https://www.googleapis.com/auth/spreadsheets",
	});
	(async () => {
		const client = await auth.getClient();

		const googleSheets = google.sheets({
			version: "v4",
			auth: client
		});

		const spreadsheetId = process.env.GOOGLE_SHEET_ID;

		const metaData = await googleSheets.spreadsheets.get({
			auth,
			spreadsheetId,
		});

		const data = {
			auth,
			spreadsheetId,
			valueInputOption: "USER_ENTERED",
			resource: {
				values: keyMass.change,
			},
		}

		if (keyMass.append) {
			data['range'] = keyMass.append;

			const append = await googleSheets.spreadsheets.values.append(data);

			fun(append);
		} else if (keyMass.values) {
			data['range'] = keyMass.values;

			delete data.valueInputOption;
			delete data.resource;

			const values = await googleSheets.spreadsheets.values.get(data);

			fun(values);
		} else if (keyMass.update) {
			data['range'] = keyMass.update;

			const update = await googleSheets.spreadsheets.values.update(data);

			fun(update);
		}
	})();
}

// google sheets fn
let whoNeedSchedule = []
let listsOfData = [
	[''],
	[''],
	[''],
	['']
]
let firstUpdateGoogle = 1
let counterOfConnection = 0
let googleSheetsUpdate = function () {
	for (let i = 1; i < 5; i++) {
		NodeGoogleSheets({
			values: `–ö—É—Ä—Å ${i}`
		}, (data) => {
			let listOfData = data.data.values;
			if (firstUpdateGoogle) {
				counterOfConnection++
			}
			if (counterOfConnection == 4) {
				firstUpdateGoogle = 0
				counterOfConnection = 0
				console.log('Google sheets –ø–æ–¥–∫–ª—é—á–µ–Ω—ã')
				sqlConnect()
			}
			listsOfData[i - 1] = listOfData
		})
	}
}
bot.on('callback_query', query => {
	whoNeedSchedule.map(el => {
		if (el.chat_id == query.message.chat.id) {
			el.notifications = !el.notifications
			pool.getConnection(function (err, connection) {
				if (err) {
					console.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è SQL(–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π): " + err.message);
					return;
				}
				connection.execute("UPDATE dailyProphet SET notifications = ? WHERE chat_id = ?", [el.notifications, el.chat_id], function (err, res) {
					connection.release()
					if (err) {
						console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π SQL:' + err.message)
						bot.sendMessage(chatId, `‚õî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑`)
						return
					} else {
						let noteMessage = '‚úÖ –¢–µ–ø–µ—Ä—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è '
						if (el.notifications) {
							noteMessage += '–≤–∫–ª—é—á–µ–Ω—ã'
						} else {
							noteMessage += '–æ—Ç–∫–ª—é—á–µ–Ω—ã'
						}
						bot.sendMessage(el.chat_id, noteMessage)
					}
				})
			})
		}
	})
})
googleSheetsUpdate()
//    MySQL     connection  
const mysql = require("mysql2");

const pool = mysql.createPool({
	connectionLimit: 10000,
	host: "sql7.freemysqlhosting.net",
	user: "sql7730644",
	database: "sql7730644",
	password: "AQwxLL9Qi6"
});
let firstSqlConnect = 1
let sqlConnect = () => {
	pool.getConnection(function (err, connection) {
		if (err) {
			return console.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è SQL: " + err.message);
		}
		connection.execute("SELECT * FROM dailyProphet", function (err, res) {
			connection.release()
			if (err) {
				console.error("–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î: " + err.message)
				bot.sendMessage(chatId, `‚õî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑`)
				return
			} else {
				whoNeedSchedule = []
				res.map(el => {
					let course = 4 - Number(el.choosen_group[3])
					listsOfData[course][0].map(groupFirstStr => {
						if (el.choosen_group == groupFirstStr) {
							whoNeedSchedule.push(el)
						}
					})
				})
				if (firstSqlConnect) {
					onListener()
					firstSqlConnect = 0
					console.log("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É MySQL —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
				}

			}
		})

	});
}

// check group fn
let checkGroup = function (msg, choosenGroup) {
	let chatId = msg.chat.id
	let groupFinded = false
	pool.getConnection(function (err, connection) {
		if (err) {
			console.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è SQL(–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä—É–ø–ø—ã): " + err.message);
			return;
		}
		connection.execute("SELECT * FROM dailyProphet", function (err, res) {
			connection.release()
			if (err) {
				bot.sendMessage(chatId, `‚õî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑`)
				return console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä—É–ø–ø—ã –≤ SQL: " + err.message)
			}
			res.map(el => {
				if (el.chat_id == chatId) {
					choosenGroup = el.choosen_group;
					groupFinded = true
					return
				}
			})
			if (groupFinded == false) {
				return addId(msg, choosenGroup)
			}
			checkCommands(msg, choosenGroup)
		})
	})
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ id –≤ –±–¥
let addId = function (msg, choosenGroup) {
	let text = msg.text
	let chatId = msg.chat.id
	if (text != null && text != undefined && text != '') {
		if (text[0] == '/') {
			text = text.slice(1)
		}
	}
	listsOfData.map(listOfData => {
		listOfData[0].map(el => {
			if (text == el) {
				choosenGroup = String(text);
				checkCommands(msg, choosenGroup)
				const sql = "INSERT INTO dailyProphet VALUES (?, ?, 1)";
				const groupValues = [chatId, choosenGroup]
				whoNeedSchedule.push({
					chat_id: chatId,
					choosen_group: choosenGroup,
					notifications: 1
				})
				pool.getConnection(function (err, connection) {
					if (err) {
						console.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è SQL(–ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã): " + err.message);
						return;
					}
					connection.execute(sql, groupValues, function (err, res) {
						connection.release()
						if (err) {
							console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –≤ SQL: " + err.message);
							bot.sendMessage(chatId, `‚õî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑`)
							return
						}
					})
				})
				bot.sendMessage(chatId, `‚úÖ –ì—Ä—É–ø–ø–∞ –∑–∞–ø–∏—Å–∞–Ω–∞: ${text}`, {
					reply_markup: {
						keyboard: [
							['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', "–ß–µ—Ç–≤–µ—Ä–≥"],
							['–í—Ç–æ—Ä–Ω–∏–∫', "–ü—è—Ç–Ω–∏—Ü–∞"],
							["–°—Ä–µ–¥–∞", "–°—É–±–±–æ—Ç–∞"],
							["–ù–∞ –Ω–µ–¥–µ–ª—é", '–ù–∞ —Å–µ–≥–æ–¥–Ω—è', '–ù–∞ –∑–∞–≤—Ç—Ä–∞', '–ò–Ω—Ñ–æ']
						]
					}
				})
			}
		})
	})
	if (choosenGroup == '') {
		let justStartComms = ['/start', 'start', 'start@DailyProphetKpfuBot', '/start@DailyProphetKpfuBot']
		let justListOfCommandsVersions = ['/start', 'start', 'start@DailyProphetKpfuBot', '/start@DailyProphetKpfuBot', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–ò–Ω—Ñ–æ', '/change', 'change', '/change@DailyProphetKpfuBot', 'change@DailyProphetKpfuBot']
		if (choosenGroup == '' && (!(justListOfCommandsVersions.includes(text)))) {
			bot.sendMessage(chatId, `‚ùå –¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –µ—ë –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞ ‚ùå`)
		}
		if (justStartComms.includes(text)) {
			checkCommands(msg, choosenGroup)
		}
	}

}

// listener —Åo–æ–±—â–µ–Ω–∏–π
let onListener = () => {
	bot.on('message', async msg => {
		let choosenGroup = ''
		const chatId = msg.chat.id
		for (bdString of whoNeedSchedule) {
			if (bdString.chat_id == chatId) {
				choosenGroup = bdString.choosen_group				
			}
		}
		console.log(choosenGroup, msg.text, ' –æ—Ç: ', msg.from.first_name)
		if (choosenGroup == '') {
			checkGroup(msg, choosenGroup)
		} else {
			checkCommands(msg, choosenGroup)
		}
	})
}

// check time function
async function checkDayAndTime() {
	let newestTime = new Date()
	let offset = newestTime.getTimezoneOffset() + 180
	let now = new Date(new Date() - 0 + offset * 60 * 1000 + 1000 * 60 * 10)
	let whichGroupNeedSchedule = []
	listsOfData.map(listOfData => {
		listOfData.map(googleString => {
			let justDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), googleString[1].split(':')[0], googleString[1].split(':')[1])
			let newDate = new Date(justDate)
			if (now.getDay() == googleString[0] && now.getHours() == newDate.getHours() && now.getMinutes() == newDate.getMinutes()) {
				for (let gIndex = 0; gIndex < googleString.length; gIndex++) {
					if (googleString[gIndex] != null) {
						if (googleString[gIndex].includes('–û–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä—ã')) {
							let tempGroup = listOfData[0][gIndex]
							if (!(whichGroupNeedSchedule.includes(tempGroup))) {
								whichGroupNeedSchedule.push(tempGroup)
								for (let groupsFromBD of whoNeedSchedule) {
									if (groupsFromBD.choosen_group == tempGroup && groupsFromBD.notifications == 1) {
										let reminderTxt = `‚è∞ –ß–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è ${googleString[gIndex]}`
										reminderTxt = reminderTxt.replace(/üíª –û–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä—ã:/gi, '')
										bot.sendMessage(groupsFromBD.chat_id, reminderTxt)
									}
								}
							}
						}
					}
				}

			}
		})
	})
}
setInterval(checkDayAndTime, 60000);

setInterval(() => {
	fetch('https://thedailyprophet.onrender.com/')
	googleSheetsUpdate()
}, 1000 * 60 * 10)